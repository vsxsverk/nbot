import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
import sqlite3
from datetime import datetime, timedelta
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect('notes.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã entries
cursor.execute('''CREATE TABLE IF NOT EXISTS entries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    admin_id INTEGER NOT NULL,
    entry_text TEXT NOT NULL,
    datetime TEXT NOT NULL,
    type TEXT NOT NULL -- 'note' –∏–ª–∏ 'appointment'
)''')
conn.commit()

# –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ notes (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    cursor.execute("""
        INSERT INTO entries (admin_id, entry_text, datetime, type)
        SELECT admin_id, note_text, datetime, 'note'
        FROM notes
    """)
    conn.commit()
except sqlite3.OperationalError:
    pass  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ notes –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

# –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ appointments (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    cursor.execute("""
        INSERT INTO entries (admin_id, entry_text, datetime, type)
        SELECT user_id, description, appointment_datetime, 'appointment'
        FROM appointments
    """)
    conn.commit()
except sqlite3.OperationalError:
    pass  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ appointments –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã)
cursor.execute("DROP TABLE IF EXISTS notes")
cursor.execute("DROP TABLE IF EXISTS appointments")
conn.commit()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.start()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
def fetch_entries(start_date=None, end_date=None, entry_type=None):
    query = """
        SELECT id, entry_text, datetime, type 
        FROM entries
    """
    params = []
    if start_date and end_date:
        query += " WHERE datetime BETWEEN ? AND ?"
        params.extend([start_date.strftime('%Y-%m-%d %H:%M:%S'), end_date.strftime('%Y-%m-%d %H:%M:%S')])
    if entry_type:
        query += " AND type = ?" if "WHERE" in query else " WHERE type = ?"
        params.append(entry_type)
    
    cursor.execute(query, params)
    entries = cursor.fetchall()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    entries.sort(key=lambda x: datetime.strptime(x[2], '%Y-%m-%d %H:%M:%S'))
    
    return entries

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º)
async def add_entry_to_db(admin_id, entry_text, datetime_str, entry_type):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        formatted_datetime = datetime.strptime(datetime_str, '%d.%m.%Y %H.%M').strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute("""
            INSERT INTO entries (admin_id, entry_text, datetime, type)
            VALUES (?, ?, ?, ?)
        """, (admin_id, entry_text, formatted_datetime, entry_type))
        conn.commit()
        entry_id = cursor.lastrowid
        entry_time = datetime.strptime(datetime_str, '%d.%m.%Y %H.%M')
        scheduler.add_job(send_notification, DateTrigger(run_date=entry_time), args=[admin_id, entry_text, entry_id])
        logging.info(f"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {entry_text} –Ω–∞ {datetime_str} (—Ç–∏–ø: {entry_type})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
        raise

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_notification(admin_id, entry_text, entry_id):
    app = ApplicationBuilder().token("YOUR_TOKEN_HERE").build()
    cursor.execute("SELECT DISTINCT admin_id FROM entries")
    all_users = cursor.fetchall()
    for user in all_users:
        try:
            await app.bot.send_message(chat_id=user[0], text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {entry_text}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}", exc_info=True)
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    cursor.execute("DELETE FROM entries WHERE id = ?", (entry_id,))
    conn.commit()

# –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
async def select_date_for_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    calendar, step = DetailedTelegramCalendar(locale='ru').build()
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:", reply_markup=calendar)
    context.user_data['action'] = 'add_note'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
async def calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info("CallbackQueryHandler triggered")
    if not query:
        logging.error("No callback query received")
        return
    await query.answer()
    logging.info(f"Callback data received: {query.data}")
    try:
        result, key, step = DetailedTelegramCalendar(locale='ru').process(query.data)
        if not result and key:
            logging.info(f"Processing calendar step: {LSTEP[step]} | Key: {key}")
            await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}:", reply_markup=key)
        elif result:
            selected_date = result.strftime('%d.%m.%Y')
            action = context.user_data.get('action')
            logging.info(f"Selected date: {selected_date}, Action: {action}")
            if action == 'add_note':
                context.user_data['selected_date'] = selected_date
                context.user_data['awaiting_note'] = True
                await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date}. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß.–ú–ú) –∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            elif action == 'view_notes':
                db_date_format = datetime.strptime(selected_date, '%d.%m.%Y').strftime('%Y-%m-%d')
                start_date = datetime.strptime(db_date_format, '%Y-%m-%d')
                end_date = start_date + timedelta(days=1)
                entries = fetch_entries(start_date, end_date)
                response = f"üìù *–ó–∞–ø–∏—Å–∏ –Ω–∞ {selected_date}:*\n"
                if entries:
                    for entry in entries:
                        entry_type = "–∑–∞–º–µ—Ç–∫–∞" if entry[3] == "note" else "–∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
                        response += f"ID: {entry[0]}, *{entry[2]}* ({entry_type}) - {entry[1]}\n"
                else:
                    response += "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
                await query.message.edit_text(response, parse_mode=ParseMode.MARKDOWN)
            elif action == 'signup':
                context.user_data['selected_date'] = selected_date
                await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {selected_date}. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß.–ú–ú) –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                context.user_data['awaiting_signup'] = True
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º
async def signup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        if context.user_data.get('awaiting_signup'):
            data = update.message.text.split(" ", 1)
            time_str = data[0].strip()
            description = data[1].strip() if len(data) > 1 else ""
            selected_date = context.user_data.get('selected_date')
            appointment_datetime = f"{selected_date} {time_str}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            cursor.execute("SELECT * FROM entries WHERE datetime = ? AND type = ?", (appointment_datetime, 'appointment'))
            existing_appointment = cursor.fetchone()
            if existing_appointment:
                await update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await add_entry_to_db(user_id, description, appointment_datetime, 'appointment')
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            cursor.execute("SELECT user_id FROM users WHERE role = 'admin'")
            admins = cursor.fetchall()
            for admin in admins:
                try:
                    await context.bot.send_message(
                        chat_id=admin[0],
                        text=f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º:\n"
                             f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {appointment_datetime}\n"
                             f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}"
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin[0]}: {e}")
            
            await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {appointment_datetime}.\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            context.user_data['awaiting_signup'] = False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (–∑–∞–º–µ—Ç–æ–∫ –∏ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏—ë–º)
async def view_entries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    user_role = cursor.fetchone()
    if not (user_role and user_role[0] == 'admin'):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    all_entries = fetch_entries()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üìù *–í—Å–µ –∑–∞–ø–∏—Å–∏:*\n"
    if all_entries:
        for entry in all_entries:
            entry_type = "–∑–∞–º–µ—Ç–∫–∞" if entry[3] == "note" else "–∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
            response += f"ID: {entry[0]}, *{entry[2]}* ({entry_type}) - {entry[1]}\n"
    else:
        response += "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    
    await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
async def view_entries_custom_range(update: Update, context: ContextTypes.DEFAULT_TYPE, days_back=0, days_forward=0):
    logging.info(f"Fetching entries from {days_back} days back to {days_forward} days forward")
    today = datetime.now()
    start_date = (today - timedelta(days=days_back)).replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = (today + timedelta(days=days_forward)).replace(hour=23, minute=59, second=59, microsecond=999999)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
    all_entries = fetch_entries(start_date, end_date)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üìù *–ó–∞–ø–∏—Å–∏ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}:*\n"
    if all_entries:
        for entry in all_entries:
            entry_type = "–∑–∞–º–µ—Ç–∫–∞" if entry[3] == "note" else "–∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
            response += f"ID: {entry[0]}, *{entry[2]}* ({entry_type}) - {entry[1]}\n"
    else:
        response += "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    
    await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (admin_id,))
    admin_role = cursor.fetchone()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not (admin_role and admin_role[0] == 'admin'):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç (user_id –∏–ª–∏ username)
        arg = context.args[0].strip()
        new_admin_id = None
        if arg.startswith("@"):  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username
            username = arg[1:]  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª "@"
            # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ username —á–µ—Ä–µ–∑ Telegram API
            chat = await context.bot.get_chat(username)
            new_admin_id = chat.id
        else:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id
            new_admin_id = int(arg)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT OR REPLACE INTO users (user_id, role) VALUES (?, 'admin')", (new_admin_id,))
        conn.commit()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {arg} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id –∏–ª–∏ @username>")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    user_role = cursor.fetchone()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ä–æ–ª—å—é 'user'
    if not user_role:
        cursor.execute("INSERT INTO users (user_id, role) VALUES (?, 'user')", (user_id,))
        conn.commit()
        logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    keyboard = []
    if user_role and user_role[0] == 'admin':
        keyboard = [
            ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏"],
            ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º"],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            ["–ó–∞–º–µ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞–º–µ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü"],
            ["–ó–∞–º–µ—Ç–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥", "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"],
            ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"]
        ]
    else:
        keyboard = [
            ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º"]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_user_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    logging.info(f"User choice: {choice}")
    if choice == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await select_date_for_note(update, context)
    elif choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏":
        calendar, step = DetailedTelegramCalendar(locale='ru').build()
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:", reply_markup=calendar)
        context.user_data['action'] = 'view_notes'
    elif choice == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º":
        calendar, step = DetailedTelegramCalendar(locale='ru').build()
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]} –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º:", reply_markup=calendar)
        context.user_data['action'] = 'signup'
    elif choice == "–ó–∞–º–µ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é":
        await view_entries_custom_range(update, context, days_back=7)
    elif choice == "–ó–∞–º–µ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü":
        await view_entries_custom_range(update, context, days_back=30)
    elif choice == "–ó–∞–º–µ—Ç–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥":
        await view_entries_custom_range(update, context, days_forward=7)
    elif choice == "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        context.user_data['awaiting_delete'] = True
    elif choice == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß.–ú–ú) –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        context.user_data['awaiting_edit'] = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"Handling message: {update.message.text}")
    if context.user_data.get('awaiting_note'):
        context.user_data['awaiting_note'] = False
        try:
            date = context.user_data.get('selected_date')
            data = update.message.text.split(" ", 1)
            time_str = data[0].strip()
            note_text = data[1].strip()
            datetime_str = f"{date} {time_str}"
            datetime.strptime(datetime_str, '%d.%m.%Y %H.%M')
            await add_entry_to_db(update.effective_user.id, note_text, datetime_str, 'note')
            await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        except (IndexError, ValueError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú, –∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω –ø—Ä–æ–±–µ–ª–æ–º.")
    elif context.user_data.get('awaiting_signup'):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º
        await signup(update, context)
    elif context.user_data.get('awaiting_delete'):
        context.user_data['awaiting_delete'] = False
        try:
            entry_id = int(update.message.text.strip())
            cursor.execute("DELETE FROM entries WHERE id = ?", (entry_id,))
            conn.commit()
            await update.message.reply_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏.")
    elif context.user_data.get('awaiting_edit'):
        context.user_data['awaiting_edit'] = False
        try:
            data = update.message.text.split(" ", 2)
            entry_id = int(data[0].strip())
            new_datetime = data[1].strip()
            new_text = data[2].strip()
            datetime.strptime(new_datetime, '%d.%m.%Y %H.%M')
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            formatted_datetime = datetime.strptime(new_datetime, '%d.%m.%Y %H.%M').strftime('%Y-%m-%d %H:%M:%S')
            cursor.execute("UPDATE entries SET datetime = ?, entry_text = ? WHERE id = ?", 
                           (formatted_datetime, new_text, entry_id))
            conn.commit()
            await update.message.reply_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        except (IndexError, ValueError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID, –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

if __name__ == "__main__":
    app = ApplicationBuilder().token("7851502628:AAHp_88IjQ86VgD6YzHVTM3ju-lpUjPeLcg").build()
    app.add_handler(CommandHandler("start", start_menu))
    app.add_handler(CommandHandler("add_admin", add_admin))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    app.add_handler(CallbackQueryHandler(calendar_callback, pattern=".*"))
    app.add_handler(MessageHandler(filters.Regex("^(–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É|–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏|–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º|–ó–∞–º–µ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é|–ó–∞–º–µ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü|–ó–∞–º–µ—Ç–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥|–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É|–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É)$"), handle_user_choice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()